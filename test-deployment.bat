@echo off
setlocal enabledelayedexpansion

echo =============================================================
echo    HELPDESK SYSTEM - POST-DEPLOYMENT VALIDATION
echo =============================================================
echo.

echo üîç Testing deployment status...
echo.

REM Test if we can reach the VM
echo üì° Testing VM connectivity...
ping -n 1 34.173.186.108 >nul 2>&1
if %errorlevel% == 0 (
    echo ‚úÖ VM is reachable at 34.173.186.108
) else (
    echo ‚ùå VM is not reachable
)
echo.

REM Test backend health endpoint
echo üîß Testing backend health endpoint...
curl -f -m 10 http://34.173.186.108:3001/health 2>nul
if %errorlevel% == 0 (
    echo ‚úÖ Backend health check passed
) else (
    echo ‚ùå Backend health check failed
    echo ‚ö†Ô∏è  This may be because:
    echo    - Containers are still starting up
    echo    - Firewall rules not configured yet
    echo    - Backend container has issues
)
echo.

REM Test frontend
echo üåê Testing frontend accessibility...
curl -f -m 10 http://34.173.186.108 2>nul
if %errorlevel% == 0 (
    echo ‚úÖ Frontend is accessible
) else (
    echo ‚ùå Frontend is not accessible
    echo ‚ö†Ô∏è  This may be because:
    echo    - Containers are still starting up
    echo    - Firewall rules not configured yet
    echo    - Frontend container has issues
)
echo.

echo üìã NEXT STEPS:
echo.
echo If containers are healthy but not accessible:
echo 1. Configure GCP firewall rules:
echo    - Run: configure-gcp-firewall-automated.sh
echo    - Or manually create rules for ports 80 and 3001
echo.
echo 2. If containers are not healthy:
echo    - Check GitHub Actions deployment logs
echo    - SSH to VM and check container status
echo.
echo 3. Access URLs (once firewall is configured):
echo    ‚Ä¢ Frontend: http://34.173.186.108
echo    ‚Ä¢ API: http://34.173.186.108:3001/api
echo    ‚Ä¢ Health: http://34.173.186.108:3001/health
echo.
echo üë§ Default Login:
echo    ‚Ä¢ Admin: admin@example.com / admin123
echo    ‚Ä¢ User: user@example.com / user123
echo.

pause
