name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          # Check for sensitive files
          if find . -name "*.key" -o -name "*.pem" -o -name "credentials.json" | grep -v node_modules; then
            echo "ERROR: Sensitive files detected in repository"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies (Backend)
        run: |
          cd backend
          npm ci

      - name: Security audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=high

      - name: Install dependencies (Frontend)
        run: |
          cd frontend
          npm ci

      - name: Security audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=high

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: helpdesk_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run backend tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: helpdesk_test
          DB_USER: postgres
          DB_PASSWORD: test_password
          JWT_SECRET: test_jwt_secret_for_testing_only_32_chars_long
        run: |
          cd backend
          npm test

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        run: |
          cd backend
          npm ci
          npm run build --if-present

      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            frontend/build/
            backend/dist/
          retention-days: 7

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_IP }} '
            cd /opt/helpdesk-ticketing-system &&
            git pull origin main &&
            docker-compose down &&
            docker-compose up -d --build
          '

      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.VM_IP }}/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"Deployment successful for Helpdesk System"}' \
              ${{ secrets.SLACK_WEBHOOK }}
          else
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"Deployment failed for Helpdesk System"}' \
              ${{ secrets.SLACK_WEBHOOK }}
          fi
