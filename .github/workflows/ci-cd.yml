name: 🚀 Helpdesk CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'docker-compose.yml'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18.x'
  
jobs:
  # 🧪 Testing & Code Quality
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ matrix.component }}/package-lock.json
        
    - name: 📦 Install Dependencies
      run: |
        cd ${{ matrix.component }}
        npm ci
        
    - name: 🧪 Run Tests
      run: |
        cd ${{ matrix.component }}
        npm test -- --coverage --watchAll=false
        
    - name: 🔍 Lint Code
      run: |
        cd ${{ matrix.component }}
        npm run lint
        
    - name: 🛡️ Security Audit
      run: |
        cd ${{ matrix.component }}
        npm audit --audit-level moderate
        
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.component }}/coverage/lcov.info
        flags: ${{ matrix.component }}

  # 🏗️ Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install Frontend Dependencies
      run: |
        cd frontend
        npm ci
        
    - name: 🏗️ Build Frontend
      run: |
        cd frontend
        npm run build
        
    - name: 📦 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  # 🚀 Deploy to GCP
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: http://${{ secrets.VM_IP }}
      
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/build/
        
    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: 🌐 Add Server to Known Hosts
      run: |
        ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
        
    - name: 🚀 Deploy Application
      run: |
        # Create deployment script
        cat > deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "🚀 Starting deployment..."
        
        # Navigate to application directory
        cd /opt/helpdesk
        
        # Stop existing application
        echo "⏹️ Stopping application..."
        pm2 stop helpdesk-backend || true
        
        # Backup current version
        echo "📦 Creating backup..."
        if [ -d "helpdesk-ticketing-system" ]; then
          cp -r helpdesk-ticketing-system helpdesk-ticketing-system.backup.$(date +%Y%m%d_%H%M%S)
          rm -rf helpdesk-ticketing-system
        fi
        
        # Clone latest code
        echo "📥 Pulling latest code..."
        git clone https://github.com/${{ github.repository }}.git helpdesk-ticketing-system
        cd helpdesk-ticketing-system
        
        # Install backend dependencies
        echo "📦 Installing backend dependencies..."
        cd backend
        npm ci --only=production
        
        # Copy environment file
        echo "⚙️ Configuring environment..."
        cp /opt/helpdesk/.env .env 2>/dev/null || echo "Warning: .env file not found"
        
        # Run database migrations if any
        echo "🗄️ Running database setup..."
        npm run setup-db-secure || echo "Database setup completed"
        
        # Start backend with PM2
        echo "🟢 Starting backend..."
        pm2 start src/index.js --name "helpdesk-backend" --update-env
        
        # Copy frontend build to nginx
        echo "🌐 Deploying frontend..."
        cd ../frontend
        if [ -d "build" ]; then
          sudo rm -rf /var/www/html/*
          sudo cp -r build/* /var/www/html/
          sudo chown -R www-data:www-data /var/www/html
        fi
        
        # Reload nginx
        echo "🔄 Reloading nginx..."
        sudo systemctl reload nginx
        
        # Save PM2 configuration
        pm2 save
        
        echo "✅ Deployment completed successfully!"
        EOF
        
        # Make script executable and run deployment
        chmod +x deploy.sh
        scp deploy.sh ubuntu@${{ secrets.VM_IP }}:/tmp/deploy.sh
        ssh ubuntu@${{ secrets.VM_IP }} "sudo chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
        
    - name: 🏥 Health Check
      run: |
        echo "🏥 Performing health check..."
        
        # Wait for application to start
        sleep 30
        
        # Check backend health
        for i in {1..5}; do
          if curl -f http://${{ secrets.VM_IP }}:3000/api/health; then
            echo "✅ Backend health check passed!"
            break
          else
            echo "⏳ Waiting for backend... (attempt $i/5)"
            sleep 10
          fi
        done
        
        # Check frontend
        if curl -f http://${{ secrets.VM_IP }}; then
          echo "✅ Frontend health check passed!"
        else
          echo "❌ Frontend health check failed!"
          exit 1
        fi
        
    - name: 📢 Deployment Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 🔄 Rollback Job (Manual Trigger)
  rollback:
    name: 🔄 Rollback Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: 🌐 Add Server to Known Hosts
      run: |
        ssh-keyscan -H ${{ secrets.VM_IP }} >> ~/.ssh/known_hosts
        
    - name: 🔄 Perform Rollback
      run: |
        ssh ubuntu@${{ secrets.VM_IP }} << 'EOF'
        cd /opt/helpdesk
        
        # Find latest backup
        BACKUP=$(ls -1t helpdesk-ticketing-system.backup.* 2>/dev/null | head -1)
        
        if [ -z "$BACKUP" ]; then
          echo "❌ No backup found for rollback!"
          exit 1
        fi
        
        echo "🔄 Rolling back to: $BACKUP"
        
        # Stop current application
        pm2 stop helpdesk-backend || true
        
        # Restore backup
        rm -rf helpdesk-ticketing-system
        cp -r "$BACKUP" helpdesk-ticketing-system
        
        # Restart application
        cd helpdesk-ticketing-system/backend
        pm2 start src/index.js --name "helpdesk-backend" --update-env
        pm2 save
        
        echo "✅ Rollback completed!"
        EOF
