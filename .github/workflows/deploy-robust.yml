name: 🚀 Robust Deployment

on:
  workflow_dispatch:

jobs:
  deploy:
    name: 🚀 Robust Deploy to GCP VM
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔑 Add VM to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: 🧪 Test SSH Connection
        run: |
          echo "🧪 Testing SSH connection..."
          ssh -o ConnectTimeout=10 ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "echo 'SSH working!'; whoami; pwd"

      - name: 🧹 Step 1 - Cleanup Previous Installation
        run: |
          echo "🧹 Cleaning up previous installation..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~
            rm -rf Helpdesk-Ticketing-System helpdesk-app
            pkill -f git -u \$(whoami) 2>/dev/null || true
            echo '✅ Cleanup completed'
          "

      - name: 📥 Step 2 - Clone Repository
        run: |
          echo "📥 Cloning repository..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git
            cd Helpdesk-Ticketing-System
            echo '📂 Repository cloned to: \$(pwd)'
            echo '📁 Files available:'
            ls -la
          "

      - name: 🐳 Step 3 - Verify Docker Setup
        run: |
          echo "🐳 Verifying Docker setup..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'Docker version:'
            docker --version
            echo 'Docker Compose version:'
            docker-compose --version
            echo 'User groups:'
            groups \$(whoami)
            echo 'Docker test:'
            docker ps || echo 'Docker permission issue - will try anyway'
          "

      - name: 📁 Step 4 - Setup Application Directory
        run: |
          echo "📁 Setting up application directory..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/Helpdesk-Ticketing-System
            mkdir -p ~/helpdesk-app
            cp -r backend frontend ~/helpdesk-app/
            cp docker-compose.prod.yml ~/helpdesk-app/
            cd ~/helpdesk-app
            echo '📋 Application files:'
            ls -la
          "

      - name: 🛑 Step 5 - Stop Existing Containers
        run: |
          echo "🛑 Stopping existing containers..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/helpdesk-app
            docker-compose -f docker-compose.prod.yml down || echo 'No containers to stop'
            docker container prune -f || true
          "

      - name: 🏗️ Step 6 - Build and Start Containers
        run: |
          echo "🏗️ Building and starting containers..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/helpdesk-app
            docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans
          "

      - name: ⏳ Step 7 - Wait and Verify Deployment
        run: |
          echo "⏳ Waiting for services to start..."
          sleep 30

          echo "📊 Checking deployment status..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd ~/helpdesk-app
            echo '📊 Container Status:'
            docker ps -a
            echo ''
            echo '📋 Recent Logs:'
            docker-compose -f docker-compose.prod.yml logs --tail=10
          "

      - name: 🎉 Step 8 - Deployment Summary
        run: |
          echo "🎉 Deployment Summary"
          echo "===================="
          echo "✅ Application deployed successfully!"
          echo "🌐 Frontend: http://${{ secrets.VM_HOST }}"
          echo "🔧 Backend API: http://${{ secrets.VM_HOST }}:3001"
          echo ""
          echo "🔍 Next steps:"
          echo "1. Configure GCP firewall to allow ports 80, 3001"
          echo "2. Test the application in browser"
          echo "3. Check container logs if needed"
