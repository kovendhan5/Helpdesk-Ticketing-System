---
name: Deploy to Production

on:
  push:
    branches: [main]

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        env:
          VM_IP: ${{ secrets.VM_IP }}
        run: |
          echo "🚀 Deploying to production server..."
          
          # Create deployment package
          tar czf deploy.tar.gz docker-compose.yml backend/ frontend/
          
          # Deploy in a single SSH session
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$VM_IP '
            set -e
            
            echo "🏗️ Setting up deployment environment..."
            sudo mkdir -p /opt/helpdesk-ticketing-system
            sudo chown ubuntu:ubuntu /opt/helpdesk-ticketing-system
            cd /opt/helpdesk-ticketing-system
            
            # Stop existing containers
            if [ -f "docker-compose.yml" ]; then
              echo "🛑 Stopping existing containers..."
              sudo docker-compose down 2>/dev/null || echo "No containers to stop"
            fi
            
            # Clean directory
            echo "🧹 Cleaning deployment directory..."
            rm -rf ./* 2>/dev/null || true
            
            # Install Docker if needed
            if ! command -v docker &> /dev/null; then
              echo "📥 Installing Docker..."
              sudo apt-get update -qq
              sudo apt-get install -y docker.io docker-compose
              sudo systemctl enable docker
              sudo systemctl start docker
              echo "✅ Docker installed"
            else
              echo "✅ Docker already available"
            fi
          '
          
          echo "📤 Copying files to server..."
          scp -o StrictHostKeyChecking=no -o ConnectTimeout=30 \
            deploy.tar.gz ubuntu@$VM_IP:/opt/helpdesk-ticketing-system/
          
          echo "🏗️ Extracting and starting services..."
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$VM_IP '
            set -e
            cd /opt/helpdesk-ticketing-system
            
            # Extract files
            tar xzf deploy.tar.gz
            rm deploy.tar.gz
            
            # Verify docker-compose.yml exists
            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml not found!"
              exit 1
            fi
              echo "📋 Files in deployment directory:"
            ls -la
            
            # Create .env file with required variables for deployment
            echo "🔧 Setting up environment variables..."
            cat > .env << EOF
            NODE_ENV=production
            PORT=3001
            DB_HOST=postgres
            DB_PORT=5432
            DB_NAME=helpdesk_db
            DB_USER=postgres
            DB_PASSWORD=helpdesk_demo_password_2024
            JWT_SECRET=demo_jwt_secret_key_for_testing_only_change_in_production_a1b2c3d4e5f6789012345678901234567890
            SESSION_TIMEOUT=3600000
            MAX_LOGIN_ATTEMPTS=5
            LOCKOUT_TIME=900000
            EOF
              echo "✅ Environment file created"
            
            # Start services
            sudo docker-compose up -d --build
            
            echo "✅ Deployment completed"
            sudo docker-compose ps
          '

      - name: Health check and debugging
        env:
          VM_IP: ${{ secrets.VM_IP }}
        run: |
          echo "🏥 Running health check and diagnostics..."
          
          # Wait for containers to start
          sleep 60
          
          ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 ubuntu@$VM_IP '
            cd /opt/helpdesk-ticketing-system
            
            echo "📊 Container Status:"
            sudo docker-compose ps
            
            echo ""
            echo "🐳 Docker Container Details:"
            sudo docker ps -a
            
            echo ""
            echo "📋 Backend Logs (last 20 lines):"
            sudo docker logs helpdesk-backend --tail 20 2>&1 || echo "Backend container not found"
            
            echo ""
            echo "📋 Frontend Logs (last 20 lines):"
            sudo docker logs helpdesk-frontend --tail 20 2>&1 || echo "Frontend container not found"
            
            echo ""
            echo "📋 PostgreSQL Logs (last 20 lines):"
            sudo docker logs helpdesk-postgres --tail 20 2>&1 || echo "PostgreSQL container not found"
            
            echo ""
            echo "🔍 Network and Port Check:"
            sudo netstat -tlnp | grep -E ":300[01]|:5432" || echo "No services listening on expected ports"
            
            echo ""
            echo "🏥 Internal Health Checks:"
            # Test backend health endpoint
            sudo docker exec helpdesk-backend wget -q --spider http://localhost:3001/health && echo "✅ Backend health OK" || echo "❌ Backend health failed"
            
            # Test frontend health endpoint  
            sudo docker exec helpdesk-frontend wget -q --spider http://localhost:3000/health && echo "✅ Frontend health OK" || echo "❌ Frontend health failed"
            
            # Test PostgreSQL connection
            sudo docker exec helpdesk-postgres pg_isready -U postgres && echo "✅ PostgreSQL ready" || echo "❌ PostgreSQL not ready"
          '
          
          echo ""
          echo "🌐 External Health Check:"
          curl -f -m 10 http://$VM_IP:3000/health && echo "✅ External frontend health OK" || echo "❌ External frontend health failed"
          curl -f -m 10 http://$VM_IP:3001/health && echo "✅ External backend health OK" || echo "❌ External backend health failed"
