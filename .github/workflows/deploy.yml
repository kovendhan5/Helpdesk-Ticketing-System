name: Deploy Helpdesk System

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Deploy to Production VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script: |
            echo "=== Starting Deployment ==="

            # Clean workspace
            cd /home/kovendhan2535
            rm -rf helpdesk-app
            mkdir helpdesk-app
            cd helpdesk-app

            # Get latest code
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git .

            # Create environment file
            cat > .env << EOF
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            FRONTEND_PORT=80
            API_URL=http://${{ secrets.VM_HOST }}:3001
            EOF

            # Stop and clean up
            docker-compose down --remove-orphans 2>/dev/null || true # Added --remove-orphans
            docker rm -f helpdesk-postgres helpdesk-backend helpdesk-frontend 2>/dev/null || true
            echo "🧹 Previous containers stopped and removed."

            echo "🔎 Checking what is using port 80 before attempting to free it..."
            sudo ss -tulnp | grep ':80' || echo "Port 80 does not appear to be in use by any process (checked with ss)."

            # Forcefully free up port 80
            echo "🔓 Attempting to free up port 80..."
            # First, try to stop any Docker container using it
            CONTAINER_IDS_ON_PORT_80=$(docker ps -q --filter "publish=80" --filter "status=running")
            if [ ! -z "$CONTAINER_IDS_ON_PORT_80" ]; then
              echo "⚠️ Docker Container(s) $CONTAINER_IDS_ON_PORT_80 found running on port 80. Attempting to stop..."
              docker stop $CONTAINER_IDS_ON_PORT_80 || echo "Attempt to stop Docker container(s) on port 80 failed or they were already stopped."
              sleep 5 # Give a moment for the port to be released
            else
              echo "✅ No running Docker containers found on port 80."
            fi

            # As a more forceful measure, try to kill any process using port 80
            # This requires sudo and might not work if the user running the script doesn't have passwordless sudo
            # or if fuser is not installed.
            echo "🔪 Attempting to kill any process on port 80 using 'sudo fuser -k 80/tcp'..."
            if sudo fuser -k 80/tcp; then
              echo "✅ Successfully killed process(es) on port 80 (if any were running)."
              sleep 5 # Give a moment for the port to be released
            else
              echo "⚠️ Could not kill process on port 80 using 'fuser' or no process was using it. This might be okay or might require manual intervention on the VM if port conflicts persist."
            fi

            # Verify again
            echo "🔎 Verifying port 80 status after attempting to free it..."
            if sudo ss -tulnp | grep ':80'; then
              echo "❌ CRITICAL: Port 80 still appears to be in use after attempts to free it."
              # exit 1 # Consider making this a fatal error
            else
              echo "✅ Port 80 appears to be free."
            fi

            # Build services
            echo "🛠️ Building services..."
            if ! docker-compose build; then
              echo "❌ Docker build failed!"
              echo "=== Backend Logs (if any) ==="
              docker-compose logs --tail=50 backend || echo "No backend logs."
              echo "=== Frontend Logs (if any) ==="
              docker-compose logs --tail=50 frontend || echo "No frontend logs."
              exit 1
            fi
            echo "✅ Services built successfully."

            # Start services
            echo "🚀 Starting services..."
            if ! docker-compose up -d; then
              echo "❌ Docker compose up failed!"
              echo "=== Backend Logs ==="
              docker-compose logs --tail=50 backend || echo "No backend logs."
              echo "=== Frontend Logs ==="
              docker-compose logs --tail=50 frontend || echo "No frontend logs."
              exit 1
            fi
            echo "✅ Services started."

            # Wait for services to initialize
            echo "⏳ Waiting for services to initialize (30 seconds)..."
            sleep 30

            echo "=== Deployment Status (docker ps) ==="
            docker ps -a

            echo "=== Detailed Container Logs ==="
            echo "--- Postgres Logs ---"
            docker-compose logs --tail=30 postgres || echo "No postgres logs."
            echo "--- Backend Logs ---"
            docker-compose logs --tail=50 backend || echo "No backend logs."
            echo "--- Frontend Logs ---"
            docker-compose logs --tail=50 frontend || echo "No frontend logs."

            echo "=== Service Health Check ==="
            FRONTEND_OK=false
            if curl -s -f http://localhost/ >/dev/null 2>&1; then
              echo "✅ Frontend: OK (Responded to http://localhost/)"
              FRONTEND_OK=true
            else
              echo "❌ Frontend: FAILED (Could not reach http://localhost/)"
            fi

            BACKEND_OK=false
            if curl -s -f http://localhost:3001/health >/dev/null 2>&1; then
              echo "✅ Backend: OK (Responded to http://localhost:3001/health)"
              BACKEND_OK=true
            else
              echo "❌ Backend: FAILED (Could not reach http://localhost:3001/health)"
            fi

            if $FRONTEND_OK && $BACKEND_OK; then
              echo "🎉🎉🎉 Deployment SUCCEEDED! 🎉🎉🎉"
            else
              echo "🔥🔥🔥 Deployment FAILED! Check logs above. 🔥🔥🔥"
              exit 1
            fi
            echo "=== Deployment Script Complete ==="
