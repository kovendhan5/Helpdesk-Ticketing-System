name: 🚀 Deploy Helpdesk System

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: 🚀 Deploy to GCP VM
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate secrets
        run: |
          echo "🔍 Validating GitHub Secrets..."
          
          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "❌ SSH_PRIVATE_KEY secret is not set or empty"
            echo "👉 Go to Settings → Secrets and variables → Actions"
            echo "👉 Add SSH_PRIVATE_KEY with content from: cat ~/key (on VM)"
            exit 1
          fi
          
          if [ -z "${{ secrets.VM_HOST }}" ]; then
            echo "❌ VM_HOST secret is not set or empty"
            echo "👉 Should be: 34.173.186.108"
            exit 1
          fi
          
          if [ -z "${{ secrets.VM_USER }}" ]; then
            echo "❌ VM_USER secret is not set or empty"
            echo "👉 Should be: kovendhan2535"
            exit 1
          fi
          
          echo "✅ All required secrets are configured"
          echo "🎯 Target server: ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}"

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔑 Add VM to known hosts
        run: |
          echo "Adding ${{ secrets.VM_HOST }} to known hosts..."
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          echo "✅ Known hosts updated"

      - name: 🧪 Test SSH Connection
        run: |
          echo "🧪 Testing SSH connection to ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}..."
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'SSH connection successful!'
            echo 'User: $(whoami)'
            echo 'Home: $HOME'
            echo 'Working directory: $(pwd)'
            echo 'Docker status:'
            docker --version || echo 'Docker not installed'
          "

      - name: 🚀 Deploy Application
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            set -e
            
            echo 'Starting deployment process...'
            
            # Clean up previous installation
            cd ~ && rm -rf Helpdesk-Ticketing-System
            
            # Clone repository
            echo 'Cloning repository...'
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git
            cd Helpdesk-Ticketing-System
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker \$USER
              echo 'Docker installed'
            else
              echo 'Docker already installed'
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo 'Installing Docker Compose...'
              sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo 'Docker Compose installed'
            else
              echo 'Docker Compose already installed'
            fi
            
            # Create application directory
            echo 'Setting up application directory...'
            sudo mkdir -p /opt/helpdesk
            sudo chown \$USER:\$USER /opt/helpdesk
            
            # Copy application files
            echo 'Copying application files...'
            cp -r backend frontend /opt/helpdesk/
            
            # Copy docker-compose file (check if exists)
            if [ -f docker-compose.prod.yml ]; then
                cp docker-compose.prod.yml /opt/helpdesk/
                echo '✅ docker-compose.prod.yml copied'
            else
                echo '❌ docker-compose.prod.yml not found, creating it...'
                # Create docker-compose.prod.yml if missing
                cat > /opt/helpdesk/docker-compose.prod.yml << 'COMPOSE_EOF'
version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: helpdesk-frontend-prod
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: helpdesk-backend-prod
    ports:
      - "3001:3001"
    depends_on:
      - postgres
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=helpdesk_db
      - DB_USER=helpdesk_user
      - DB_PASSWORD=HelpDesk2025SecurePassword!
      - JWT_SECRET=your-super-secure-jwt-secret-must-be-at-least-256-bits-long-for-production-security-2025
      - API_URL=http://34.173.186.108:3001/api
      - FRONTEND_URL=http://34.173.186.108
      - CORS_ORIGIN=http://34.173.186.108
      - BCRYPT_ROUNDS=12
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - SESSION_SECRET=your-session-secret-key-for-production-2025
      - SESSION_TIMEOUT=3600000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15
    container_name: helpdesk-postgres-prod
    environment:
      - POSTGRES_DB=helpdesk_db
      - POSTGRES_USER=helpdesk_user
      - POSTGRES_PASSWORD=HelpDesk2025SecurePassword!
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U helpdesk_user -d helpdesk_db"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
COMPOSE_EOF
                echo '✅ docker-compose.prod.yml created'
            fi
            
            # Create production environment file
            echo 'Creating environment configuration...'
            cat > /opt/helpdesk/.env << 'ENV_EOF'
NODE_ENV=production
PORT=3001

DB_HOST=helpdesk-postgres
DB_PORT=5432
DB_NAME=helpdesk_db
DB_USER=helpdesk_user
DB_PASSWORD=HelpDesk2025SecurePassword!

JWT_SECRET=your-super-secure-jwt-secret-must-be-at-least-256-bits-long-for-production-security-2025

API_URL=http://34.173.186.108:3001/api
FRONTEND_URL=http://34.173.186.108
CORS_ORIGIN=http://34.173.186.108

BCRYPT_ROUNDS=12
RATE_LIMIT_WINDOW_MS=900000
RATE_LIMIT_MAX_REQUESTS=100

SESSION_SECRET=your-session-secret-key-for-production-2025
SESSION_TIMEOUT=3600000
ENV_EOF
            
            # Deploy with Docker Compose
            echo 'Deploying with Docker Compose...'
            cd /opt/helpdesk
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down || true
            
            # Clean up old images and containers
            docker system prune -f || true
            
            # Build and start containers
            docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans
            
            # Wait for services to start
            echo 'Waiting for services to start...'
            sleep 60
            
            # Check container status
            echo 'Container Status:'
            docker ps -a
            
            # Health checks
            echo 'Running health checks...'
            
            # Check backend health
            for i in {1..10}; do
              if wget --spider --quiet http://localhost:3001/health; then
                echo 'Backend health check passed'
                break
              else
                echo \"Backend health check attempt \$i/10 failed, retrying...\"
                sleep 10
              fi
            done
            
            # Check frontend
            for i in {1..10}; do
              if wget --spider --quiet http://localhost:80/; then
                echo 'Frontend health check passed'
                break
              else
                echo \"Frontend health check attempt \$i/10 failed, retrying...\"
                sleep 10
              fi
            done
            
            # Final status check
            echo 'Final deployment status:'
            docker-compose -f docker-compose.prod.yml ps
            
            echo 'Deployment completed successfully!'
            echo 'Access your application at: http://34.173.186.108'
          "
