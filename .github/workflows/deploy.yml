name: Deploy Helpdesk System

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Deploy to Production VM
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script: |
            echo "=== Starting Deployment ==="

            # Clean workspace
            cd /home/kovendhan2535
            rm -rf helpdesk-app
            mkdir helpdesk-app
            cd helpdesk-app

            # Get latest code
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git .

            # Create environment file
            cat > .env << EOF
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            FRONTEND_PORT=80
            API_URL=http://${{ secrets.VM_HOST }}:3001
            EOF

            # Stop and clean up
            docker-compose down --remove-orphans 2>/dev/null || true # Added --remove-orphans
            docker rm -f helpdesk-postgres helpdesk-backend helpdesk-frontend 2>/dev/null || true
            echo "🧹 Previous containers stopped and removed."

            # Forcefully free up port 80 from any Docker container
            echo "🔓 Attempting to free up port 80 by stopping any Docker container using it..."
            CONTAINER_IDS_ON_PORT_80=$(docker ps -q --filter "publish=80" --filter "status=running")
            if [ ! -z "$CONTAINER_IDS_ON_PORT_80" ]; then
              echo "⚠️ Container(s) $CONTAINER_IDS_ON_PORT_80 found running on port 80. Attempting to stop..."
              docker stop $CONTAINER_IDS_ON_PORT_80 || echo "Attempt to stop container(s) on port 80 failed or they were already stopped."
              sleep 5 # Give a moment for the port to be released
              # Verify again
              STILL_RUNNING_ON_PORT_80=$(docker ps -q --filter "publish=80" --filter "status=running")
              if [ ! -z "$STILL_RUNNING_ON_PORT_80" ]; then
                echo "❌ CRITICAL: Failed to free port 80 from Docker containers. Container(s) $STILL_RUNNING_ON_PORT_80 still running on port 80."
                docker ps -a --filter "publish=80" # Show details
                # exit 1 # Consider making this a fatal error if port 80 must be free
              else
                echo "✅ Port 80 should now be free from running Docker containers."
              fi
            else
              echo "✅ Port 80 was not in use by any running Docker container."
            fi

            # Build services
            echo "🛠️ Building services..."
            if ! docker-compose build; then
              echo "❌ Docker build failed!"
              echo "=== Backend Logs (if any) ==="
              docker-compose logs --tail=50 backend || echo "No backend logs."
              echo "=== Frontend Logs (if any) ==="
              docker-compose logs --tail=50 frontend || echo "No frontend logs."
              exit 1
            fi
            echo "✅ Services built successfully."

            # Start services
            echo "🚀 Starting services..."
            if ! docker-compose up -d; then
              echo "❌ Docker compose up failed!"
              echo "=== Backend Logs ==="
              docker-compose logs --tail=50 backend || echo "No backend logs."
              echo "=== Frontend Logs ==="
              docker-compose logs --tail=50 frontend || echo "No frontend logs."
              exit 1
            fi
            echo "✅ Services started."

            # Wait for services to initialize
            echo "⏳ Waiting for services to initialize (30 seconds)..."
            sleep 30

            echo "=== Deployment Status (docker ps) ==="
            docker ps -a

            echo "=== Detailed Container Logs ==="
            echo "--- Postgres Logs ---"
            docker-compose logs --tail=30 postgres || echo "No postgres logs."
            echo "--- Backend Logs ---"
            docker-compose logs --tail=50 backend || echo "No backend logs."
            echo "--- Frontend Logs ---"
            docker-compose logs --tail=50 frontend || echo "No frontend logs."

            echo "=== Service Health Check ==="
            FRONTEND_OK=false
            if curl -s -f http://localhost/ >/dev/null 2>&1; then
              echo "✅ Frontend: OK (Responded to http://localhost/)"
              FRONTEND_OK=true
            else
              echo "❌ Frontend: FAILED (Could not reach http://localhost/)"
            fi

            BACKEND_OK=false
            if curl -s -f http://localhost:3001/health >/dev/null 2>&1; then
              echo "✅ Backend: OK (Responded to http://localhost:3001/health)"
              BACKEND_OK=true
            else
              echo "❌ Backend: FAILED (Could not reach http://localhost:3001/health)"
            fi

            if $FRONTEND_OK && $BACKEND_OK; then
              echo "🎉🎉🎉 Deployment SUCCEEDED! 🎉🎉🎉"
            else
              echo "🔥🔥🔥 Deployment FAILED! Check logs above. 🔥🔥🔥"
              exit 1
            fi
            echo "=== Deployment Script Complete ==="
