name: üöÄ Deploy Helpdesk System

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: üöÄ Deploy to GCP VM
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîç Validate secrets
        run: |
          echo "üîç Validating GitHub Secrets..."

          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚ùå SSH_PRIVATE_KEY secret is not set or empty"
            echo "üëâ Go to Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "üëâ Add SSH_PRIVATE_KEY with content from: cat ~/key (on VM)"
            exit 1
          fi

          if [ -z "${{ secrets.VM_HOST }}" ]; then
            echo "‚ùå VM_HOST secret is not set or empty"
            echo "üëâ Should be: 34.173.186.108"
            exit 1
          fi

          if [ -z "${{ secrets.VM_USER }}" ]; then
            echo "‚ùå VM_USER secret is not set or empty"
            echo "üëâ Should be: kovendhan2535"
            exit 1
          fi

          echo "‚úÖ All required secrets are configured"
          echo "üéØ Target server: ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}"

      - name: üîß Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîë Add VM to known hosts
        run: |
          echo "Adding ${{ secrets.VM_HOST }} to known hosts..."
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          echo "‚úÖ Known hosts updated"

      - name: üß™ Test SSH Connection
        run: |
          echo "üß™ Testing SSH connection to ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}..."
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'SSH connection successful!'
            echo 'User: $(whoami)'
            echo 'Home: $HOME'
            echo 'Working directory: $(pwd)'
            echo 'Docker status:'
            docker --version || echo 'Docker not installed'
          "

      - name: üöÄ Deploy Application
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            set -e
            
            echo 'Starting deployment process...'
            
            # Clean up previous installation completely
            cd ~
            sudo rm -rf Helpdesk-Ticketing-System
            sudo rm -rf .git
            
            # Clear any git locks
            sudo pkill -f git || true
            
            # Clone repository with fresh start
            echo 'Cloning repository...'
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git
            cd Helpdesk-Ticketing-System
            
            # Show current directory and files for debugging
            echo 'Current directory: \$(pwd)'
            echo 'Files in repository:'
            ls -la
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker \$USER
              echo 'Docker installed'
            else
              echo 'Docker already installed'
            fi
            
            # Install Docker Compose if not present
            if ! command -v docker-compose &> /dev/null; then
              echo 'Installing Docker Compose...'
              sudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              echo 'Docker Compose installed'
            else
              echo 'Docker Compose already installed'
            fi
            
            # Create application directory
            echo 'Setting up application directory...'
            sudo mkdir -p /opt/helpdesk
            sudo chown \$USER:\$USER /opt/helpdesk
            
            # Copy files safely
            echo 'Copying application files...'
            cp -r backend frontend /opt/helpdesk/
            
            # Always copy the docker-compose file from repository
            cp docker-compose.prod.yml /opt/helpdesk/
            echo '‚úÖ Files copied successfully'
            
            # Deploy with Docker Compose
            echo 'Deploying with Docker Compose...'
            cd /opt/helpdesk
            
            # Stop existing containers
            docker-compose -f docker-compose.prod.yml down || true
            
            # Clean up old images and containers
            docker system prune -f || true
            
            # Build and start containers
            docker-compose -f docker-compose.prod.yml up -d --build --remove-orphans
            
            # Wait for services to start
            echo 'Waiting for services to start...'
            sleep 60
            
            # Check container status
            echo 'Container Status:'
            docker ps -a
            
            echo '‚úÖ Deployment completed successfully!'
            echo 'üåê Access your application at: http://34.173.186.108'
          "
