name: Deploy Helpdesk System
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30s
          script: |
            echo "SSH connection successful!"
            echo "Server: $(hostname)"
            echo "User: $(whoami)"
            echo "Date: $(date)"

      - name: Deploy Application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 900s
          script: |
            echo "=== HELPDESK SYSTEM DEPLOYMENT ==="
            echo "Starting deployment at: $(date)"

            # Navigate to deployment directory
            cd /home/${{ secrets.VM_USER }}

            # Clean up previous deployment
            rm -rf helpdesk-deployment
            mkdir helpdesk-deployment
            cd helpdesk-deployment

            # Clone repository
            echo "Cloning repository..."
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git .

            # Create environment file
            echo "Configuring environment..."
            cat > .env << 'EOFENV'
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
            FRONTEND_PORT=8080
            API_URL=http://${{ secrets.VM_HOST }}:3001
            EOFENV

            # Stop any existing containers
            echo "Cleaning up existing containers..."
            docker-compose down --remove-orphans 2>/dev/null || true
            docker stop helpdesk-postgres helpdesk-redis helpdesk-backend helpdesk-frontend 2>/dev/null || true
            docker rm helpdesk-postgres helpdesk-redis helpdesk-backend helpdesk-frontend 2>/dev/null || true

            # Build and start services
            echo "Building services..."
            if ! docker-compose build; then
              echo "Build failed!"
              exit 1
            fi

            echo "Starting services..."
            if ! docker-compose up -d; then
              echo "Failed to start services!"
              docker-compose logs --tail=20
              exit 1
            fi

            # Wait for services to be ready
            echo "Waiting for services to initialize..."
            sleep 30

            # Test deployment
            echo "=== TESTING DEPLOYMENT ==="
            FRONTEND_OK=false
            BACKEND_OK=false

            if curl -f -s http://localhost:8080 >/dev/null 2>&1; then
              echo "‚úÖ Frontend: WORKING"
              FRONTEND_OK=true
            else
              echo "‚ùå Frontend: FAILED"
            fi

            if curl -f -s http://localhost:3001/health >/dev/null 2>&1; then
              echo "‚úÖ Backend: WORKING"
              BACKEND_OK=true
            else
              echo "‚ùå Backend: FAILED"
            fi

            # Show container status
            echo "=== CONTAINER STATUS ==="
            docker-compose ps

            # Final result
            if [ "$FRONTEND_OK" = true ] && [ "$BACKEND_OK" = true ]; then
              echo ""
              echo "üéâ DEPLOYMENT SUCCESSFUL!"
              echo "Frontend: http://${{ secrets.VM_HOST }}:8080"
              echo "Backend: http://${{ secrets.VM_HOST }}:3001/health"
              echo "Deployment completed at: $(date)"
            else
              echo ""
              echo "‚ùå DEPLOYMENT FAILED!"
              echo "=== LOGS FOR DEBUGGING ==="
              docker-compose logs --tail=30
              exit 1
            fi
