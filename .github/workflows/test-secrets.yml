name: üß™ Test GitHub Secrets

on:
  workflow_dispatch: # Manual trigger only

jobs:
  test-secrets:
    name: Test GitHub Secrets Configuration
    runs-on: ubuntu-latest

    steps:
      - name: üîç Check Secrets
        run: |
          echo "=== GitHub Secrets Test ==="

          # Check if secrets exist (without exposing values)
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "‚úÖ SSH_PRIVATE_KEY: CONFIGURED"
          else
            echo "‚ùå SSH_PRIVATE_KEY: NOT CONFIGURED"
          fi

          if [ -n "${{ secrets.VM_HOST }}" ]; then
            echo "‚úÖ VM_HOST: CONFIGURED (${{ secrets.VM_HOST }})"
          else
            echo "‚ùå VM_HOST: NOT CONFIGURED"
          fi

          if [ -n "${{ secrets.VM_USER }}" ]; then
            echo "‚úÖ VM_USER: CONFIGURED (${{ secrets.VM_USER }})"
          else
            echo "‚ùå VM_USER: NOT CONFIGURED"
          fi

      - name: üîë Test SSH Key Format
        run: |
          echo "Testing SSH key format..."

          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            # Check if key starts correctly
            if echo "${{ secrets.SSH_PRIVATE_KEY }}" | head -1 | grep -q "BEGIN.*PRIVATE KEY"; then
              echo "‚úÖ SSH key starts with correct header"
            else
              echo "‚ùå SSH key format error - missing header"
            fi
            
            # Check if key ends correctly  
            if echo "${{ secrets.SSH_PRIVATE_KEY }}" | tail -1 | grep -q "END.*PRIVATE KEY"; then
              echo "‚úÖ SSH key ends with correct footer"
            else
              echo "‚ùå SSH key format error - missing footer"
            fi
          else
            echo "‚ö†Ô∏è SSH_PRIVATE_KEY not configured - skipping format test"
          fi

      - name: üåê Test VM Connectivity
        run: |
          echo "Testing VM connectivity..."

          if [ -n "${{ secrets.VM_HOST }}" ]; then
            # Test if hostname resolves
            if nslookup ${{ secrets.VM_HOST }}; then
              echo "‚úÖ VM hostname resolves"
            else
              echo "‚ùå VM hostname does not resolve"
            fi
            
            # Test if port 22 is open
            if timeout 10 bash -c "</dev/tcp/${{ secrets.VM_HOST }}/22"; then
              echo "‚úÖ SSH port 22 is accessible"
            else
              echo "‚ùå SSH port 22 is not accessible"
            fi
          else
            echo "‚ö†Ô∏è VM_HOST not configured - skipping connectivity test"
          fi
