name: üöÄ Deploy with Sudo Docker

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  DEPLOY_DIR: /home/${{ secrets.VM_USER }}/helpdesk-deployment

jobs:
  deploy:
    name: üöÄ Deploy to GCP VM
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîë Add VM to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: üßπ Clean Previous Deployment
        run: |
          echo "üßπ Cleaning previous deployment..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'Stopping existing containers (if any)...'
            sudo docker-compose -f $DEPLOY_DIR/docker-compose.prod.yml down --remove-orphans || echo 'No existing containers to stop'
            
            echo 'Cleaning up old images...'
            sudo docker system prune -f || echo 'Cleanup completed'
            
            echo 'Removing deployment directory...'
            rm -rf $DEPLOY_DIR || echo 'Directory already clean'
          "

      - name: üìÇ Create Deployment Directory
        run: |
          echo "üìÇ Creating deployment directory..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            echo 'Deployment directory created: \$(pwd)'
          "

      - name: üì§ Upload Application Files
        run: |
          echo "üì§ Uploading application files..."
          # Create temporary archive
          tar -czf helpdesk-app.tar.gz \
            backend/ \
            frontend/ \
            docker-compose.prod.yml \
            .env.production \
            deploy-production.sh \
            package*.json || true

          # Upload to VM
          scp helpdesk-app.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:$DEPLOY_DIR/

          # Extract on VM
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            tar -xzf helpdesk-app.tar.gz
            rm helpdesk-app.tar.gz
            echo 'Files extracted successfully'
            ls -la
          "

      - name: üîß Set Execute Permissions
        run: |
          echo "üîß Setting execute permissions..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            chmod +x deploy-production.sh || echo 'Script permissions set'
            chmod +x *.sh || echo 'All scripts permissions set'
          "

      - name: üê≥ Build Docker Images
        run: |
          echo "üê≥ Building Docker images..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            echo 'Building backend image...'
            sudo docker build -t helpdesk-backend:latest ./backend/
            
            echo 'Building frontend image...'
            sudo docker build -t helpdesk-frontend:latest ./frontend/
            
            echo 'Images built successfully!'
            sudo docker images | grep helpdesk
          "

      - name: üöÄ Deploy Application
        run: |
          echo "üöÄ Deploying application..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            echo 'Starting containers with docker-compose...'
            sudo docker-compose -f docker-compose.prod.yml up -d
            
            echo 'Waiting for containers to start...'
            sleep 15
            
            echo 'Checking container status...'
            sudo docker-compose -f docker-compose.prod.yml ps
          "

      - name: üîç Verify Deployment
        run: |
          echo "üîç Verifying deployment..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            echo 'Container status:'
            sudo docker-compose -f docker-compose.prod.yml ps
            
            echo 'Container logs (last 20 lines):'
            echo '=== BACKEND LOGS ==='
            sudo docker-compose -f docker-compose.prod.yml logs --tail=20 backend || echo 'Backend logs not available'
            
            echo '=== FRONTEND LOGS ==='
            sudo docker-compose -f docker-compose.prod.yml logs --tail=20 frontend || echo 'Frontend logs not available'
            
            echo '=== DATABASE LOGS ==='
            sudo docker-compose -f docker-compose.prod.yml logs --tail=20 db || echo 'Database logs not available'
          "

      - name: üåê Check Application Endpoints
        run: |
          echo "üåê Checking application endpoints..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'Testing local endpoints...'
            
            echo 'Backend health check:'
            curl -f http://localhost:3001/health || echo 'Backend not responding yet'
            
            echo 'Frontend check:'
            curl -f http://localhost:80 || echo 'Frontend not responding yet'
            
            echo 'Database connection test:'
            sudo docker-compose -f $DEPLOY_DIR/docker-compose.prod.yml exec -T db pg_isready -U helpdesk_user || echo 'Database not ready yet'
          "

      - name: üìã Deployment Summary
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo ""
          echo "‚úÖ **Deployment completed successfully!**"
          echo ""
          echo "üîó **Access Information:**"
          echo "‚Ä¢ Frontend: http://${{ secrets.VM_HOST }}"
          echo "‚Ä¢ Backend API: http://${{ secrets.VM_HOST }}:3001"
          echo "‚Ä¢ WebSocket: ws://${{ secrets.VM_HOST }}:3001"
          echo ""
          echo "üë§ **Default Admin Account:**"
          echo "‚Ä¢ Email: admin@example.com"
          echo "‚Ä¢ Password: admin123"
          echo ""
          echo "üë§ **Default User Account:**"
          echo "‚Ä¢ Email: user@example.com"  
          echo "‚Ä¢ Password: user123"
          echo ""
          echo "‚ö†Ô∏è  **Next Steps Required:**"
          echo "1. Configure GCP Firewall rules for ports 80 and 3001"
          echo "2. Test application functionality"
          echo "3. Verify WebSocket connections"
          echo ""
          echo "üîß **If issues occur:**"
          echo "‚Ä¢ Check container logs: sudo docker-compose -f $DEPLOY_DIR/docker-compose.prod.yml logs"
          echo "‚Ä¢ Restart services: sudo docker-compose -f $DEPLOY_DIR/docker-compose.prod.yml restart"
