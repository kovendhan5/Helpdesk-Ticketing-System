name: üöÄ Deploy without Sudo (Docker Group Fix)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  DEPLOY_DIR: /home/${{ secrets.VM_USER }}/helpdesk-deployment

jobs:
  deploy:
    name: üöÄ Deploy to GCP VM (No Sudo Required)
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: üîë Add VM to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: üîç Check Docker Access and Fix if Needed
        run: |
          echo "üîç Checking Docker access..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'Current user: \$(whoami)'
            echo 'Testing Docker access:'
            if docker ps &>/dev/null; then
              echo '‚úÖ Docker access working!'
            else
              echo '‚ö†Ô∏è Docker access denied. Attempting fix...'
              
              # Try to add user to docker group (this might work if sudo is passwordless for usermod)
              if sudo usermod -aG docker \$(whoami) 2>/dev/null; then
                echo '‚úÖ User added to docker group successfully!'
                echo 'Note: You may need to logout/login for group changes to take effect'
                # Force new group membership for current session
                newgrp docker << EEOF
                echo 'Testing Docker access with new group:'
                docker ps || echo 'Still need logout/login for full effect'
          EEOF
              else
                echo '‚ùå Cannot add user to docker group (sudo requires password)'
                echo 'Will try alternative approaches...'
              fi
            fi
          "

      - name: üîÑ Alternative: Use Docker without Group (Rootless)
        run: |
          echo "üîÑ Setting up rootless Docker alternative..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            # Check if rootless Docker is available
            if command -v dockerd-rootless.sh &> /dev/null; then
              echo '‚úÖ Rootless Docker available'
              # Setup rootless Docker if not already running
              if ! pgrep -f 'dockerd-rootless' > /dev/null; then
                echo 'Starting rootless Docker daemon...'
                export PATH=\$HOME/bin:\$PATH
                export DOCKER_HOST=unix://\$XDG_RUNTIME_DIR/docker.sock
                dockerd-rootless.sh --experimental &
                sleep 10
              fi
              export DOCKER_HOST=unix://\$XDG_RUNTIME_DIR/docker.sock
              docker version || echo 'Rootless Docker setup needs work'
            else
              echo '‚ùå Rootless Docker not available'
            fi
          "

      - name: üîß Alternative: Manual Container Setup
        run: |
          echo "üîß Attempting manual container setup without Docker Compose..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            # Test if we can run Docker at all
            if docker ps &>/dev/null; then
              echo '‚úÖ Docker access confirmed!'
            else
              echo '‚ùå No Docker access available. Manual deployment required.'
              echo 'Will try to run applications directly without containers...'
              
              # Install Node.js and PostgreSQL if not available
              echo 'Checking Node.js availability...'
              if command -v node &> /dev/null; then
                echo '‚úÖ Node.js available: \$(node --version)'
              else
                echo '‚ö†Ô∏è Node.js not found. Installing via package manager...'
                # Try to install Node.js
                curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash - || echo 'Node.js installation failed'
                sudo apt-get install -y nodejs || echo 'Node.js installation failed'
              fi
              
              echo 'Checking PostgreSQL availability...'
              if command -v psql &> /dev/null; then
                echo '‚úÖ PostgreSQL client available'
              else
                echo '‚ö†Ô∏è PostgreSQL not found'
              fi
            fi
          "

      - name: üßπ Clean Previous Deployment (Without Sudo)
        run: |
          echo "üßπ Cleaning previous deployment..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo 'Stopping existing containers (if any)...'
            docker-compose -f $DEPLOY_DIR/docker-compose.prod.yml down --remove-orphans 2>/dev/null || echo 'No existing containers to stop'
            
            echo 'Cleaning up old images...'
            docker system prune -f 2>/dev/null || echo 'Cleanup completed'
            
            echo 'Removing deployment directory...'
            rm -rf $DEPLOY_DIR || echo 'Directory already clean'
          "

      - name: üìÇ Create Deployment Directory
        run: |
          echo "üìÇ Creating deployment directory..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            echo 'Deployment directory created: \$(pwd)'
          "

      - name: üì§ Upload Application Files
        run: |
          echo "üì§ Uploading application files..."
          # Create temporary archive
          tar -czf helpdesk-app.tar.gz \
            backend/ \
            frontend/ \
            docker-compose.prod.yml \
            .env.production \
            deploy-production.sh \
            package*.json || true
          
          # Upload to VM
          scp helpdesk-app.tar.gz ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:$DEPLOY_DIR/
          
          # Extract on VM
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            tar -xzf helpdesk-app.tar.gz
            rm helpdesk-app.tar.gz
            echo 'Files extracted successfully'
            ls -la
          "

      - name: üîß Set Execute Permissions
        run: |
          echo "üîß Setting execute permissions..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            chmod +x deploy-production.sh || echo 'Script permissions set'
            chmod +x *.sh || echo 'All scripts permissions set'
          "

      - name: üê≥ Try Docker Build (No Sudo)
        run: |
          echo "üê≥ Attempting Docker builds without sudo..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            if docker ps &>/dev/null; then
              echo 'Building backend image...'
              docker build -t helpdesk-backend:latest ./backend/ || echo 'Backend build failed'
              
              echo 'Building frontend image...'
              docker build -t helpdesk-frontend:latest ./frontend/ || echo 'Frontend build failed'
              
              echo 'Checking built images...'
              docker images | grep helpdesk || echo 'No images built'
            else
              echo '‚ùå Docker access not available. Skipping Docker builds.'
            fi
          "

      - name: üöÄ Deploy Application (Docker)
        run: |
          echo "üöÄ Deploying with Docker (if available)..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            if docker ps &>/dev/null; then
              echo 'Starting containers with docker-compose...'
              docker-compose -f docker-compose.prod.yml up -d || echo 'Docker deployment failed'
              
              echo 'Waiting for containers to start...'
              sleep 15
              
              echo 'Checking container status...'
              docker-compose -f docker-compose.prod.yml ps || echo 'Cannot check container status'
            else
              echo '‚ùå Docker not available. Will attempt manual deployment...'
            fi
          "

      - name: üîß Alternative Manual Deployment (No Docker)
        run: |
          echo "üîß Manual deployment without Docker..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            
            # Only run manual deployment if Docker failed
            if ! docker ps &>/dev/null; then
              echo 'üîß Setting up manual deployment...'
              
              # Install dependencies for backend
              if [ -d backend ]; then
                echo 'Installing backend dependencies...'
                cd backend
                npm install || echo 'Backend npm install failed'
                cd ..
              fi
              
              # Install dependencies for frontend  
              if [ -d frontend ]; then
                echo 'Installing frontend dependencies...'
                cd frontend
                npm install || echo 'Frontend npm install failed'
                npm run build || echo 'Frontend build failed'
                cd ..
              fi
              
              echo '‚ö†Ô∏è Manual deployment setup complete.'
              echo 'Note: You will need to:'
              echo '1. Setup PostgreSQL database manually'
              echo '2. Configure environment variables'
              echo '3. Start backend: cd backend && npm start'
              echo '4. Serve frontend build files via nginx or similar'
            else
              echo '‚úÖ Docker deployment succeeded, manual deployment not needed'
            fi
          "

      - name: üîç Final Verification
        run: |
          echo "üîç Verifying deployment..."
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            
            echo 'Checking for running containers...'
            if docker ps &>/dev/null; then
              echo 'Container status:'
              docker-compose -f docker-compose.prod.yml ps || echo 'Cannot check containers'
              
              echo 'Testing local endpoints...'
              curl -f http://localhost:80 -o /dev/null -s && echo '‚úÖ Frontend responding' || echo '‚ùå Frontend not responding'
              curl -f http://localhost:3001/health -o /dev/null -s && echo '‚úÖ Backend API responding' || echo '‚ùå Backend API not responding'
            else
              echo 'Manual deployment status:'
              echo 'Backend files:' && ls -la backend/ || echo 'No backend files'
              echo 'Frontend files:' && ls -la frontend/build/ || echo 'No frontend build'
            fi
          "

      - name: üìã Deployment Summary
        run: |
          echo "üìã Deployment Summary"
          echo "===================="
          echo ""
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            cd $DEPLOY_DIR
            if docker ps &>/dev/null; then
              echo '‚úÖ **Docker Deployment Status**: SUCCESS'
              echo 'üîó **Access URLs**:'
              echo '‚Ä¢ Frontend: http://${{ secrets.VM_HOST }}'
              echo '‚Ä¢ Backend API: http://${{ secrets.VM_HOST }}:3001'
              echo '‚Ä¢ Health Check: http://${{ secrets.VM_HOST }}:3001/health'
            else
              echo '‚ö†Ô∏è **Docker Deployment Status**: FAILED - Manual setup required'
              echo 'üìã **Manual Setup Instructions**:'
              echo '1. Add user to docker group: sudo usermod -aG docker \$(whoami)'
              echo '2. Logout and login again'
              echo '3. Re-run this deployment workflow'
              echo ''
              echo 'OR setup manually:'
              echo '1. Start PostgreSQL database'
              echo '2. Configure .env file with database credentials'
              echo '3. Run: cd backend && npm start'
              echo '4. Setup nginx to serve frontend/build/'
            fi
          "
