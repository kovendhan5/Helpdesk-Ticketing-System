name: 🚀 Helpdesk CI/CD Pipeline (DISABLED)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: 🧪 Test & Build
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: 📦 Install Backend Dependencies
        run: |
          cd backend
          npm ci

      - name: 📦 Install Frontend Dependencies
        run: |
          cd frontend
          npm ci

      - name: 🧪 Run Backend Tests
        run: |
          cd backend
          npm run test:ci || echo "No tests configured"

      - name: 🧪 Run Frontend Tests
        run: |
          cd frontend
          npm run test:ci || echo "No tests configured"

      - name: 🏗️ Build Frontend
        run: |
          cd frontend
          npm run build

      - name: 📊 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

  deploy:
    name: 🚀 Deploy to GCP VM
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📊 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/

      - name: 🔧 Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔑 Add Known Hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST || '34.173.186.108' }} >> ~/.ssh/known_hosts

      - name: 🏗️ Create Deployment Package
        run: |
          # Create deployment directory
          mkdir -p deploy-package

          # Copy application files
          cp -r backend deploy-package/
          cp -r frontend deploy-package/
          cp docker-compose.prod.yml deploy-package/
          cp .env.production deploy-package/.env 2>/dev/null || echo "No .env.production found"

          # Create deployment script
          cat > deploy-package/deploy.sh << 'DEPLOY_EOF'
          #!/bin/bash
          set -e

          echo "🚀 Starting deployment..."

          # Set variables
          APP_DIR="/opt/helpdesk"
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="/opt/helpdesk-backup-$TIMESTAMP"

          # Create backup
          if [ -d "$APP_DIR" ]; then
              echo "📦 Creating backup..."
              sudo cp -r $APP_DIR $BACKUP_DIR
          fi

          # Ensure Docker is running
          if ! docker info > /dev/null 2>&1; then
              echo "🔧 Starting Docker..."
              sudo systemctl start docker
          fi

          # Create app directory
          sudo mkdir -p $APP_DIR
          sudo chown $USER:$USER $APP_DIR

          # Copy new files
          echo "📋 Updating application files..."
          cp -r ~/deployment/* $APP_DIR/
          cd $APP_DIR

          # Create environment file if not exists
          if [ ! -f ".env" ]; then
              cat > .env << 'ENV_EOF'
          NODE_ENV=production
          PORT=3001

          DB_HOST=helpdesk-postgres
          DB_PORT=5432
          DB_NAME=helpdesk_db
          DB_USER=helpdesk_user
          DB_PASSWORD=HelpDesk2025SecurePassword!

          JWT_SECRET=your-super-secure-jwt-secret-must-be-at-least-256-bits-long-for-production-security

          API_URL=http://34.173.186.108:3001/api
          FRONTEND_URL=http://34.173.186.108
          CORS_ORIGIN=http://34.173.186.108

          BCRYPT_ROUNDS=12
          RATE_LIMIT_WINDOW_MS=900000
          RATE_LIMIT_MAX_REQUESTS=100

          SESSION_SECRET=your-session-secret-key-for-production
          SESSION_TIMEOUT=3600000
          ENV_EOF
          fi

          # Stop existing services
          echo "⏹️ Stopping existing services..."
          docker-compose -f docker-compose.prod.yml down || true

          # Clean up old images
          echo "🧹 Cleaning up..."
          docker system prune -f || true

          # Start new services
          echo "🚀 Starting services..."
          docker-compose -f docker-compose.prod.yml up -d --build

          # Wait for services
          echo "⏳ Waiting for services to start..."
          sleep 45

          # Health checks
          echo "🏥 Running health checks..."

          # Check containers
          if [ "$(docker-compose -f docker-compose.prod.yml ps -q | wc -l)" -gt 0 ]; then
              echo "✅ Containers are running"
              docker-compose -f docker-compose.prod.yml ps
          else
              echo "❌ No containers running"
              exit 1
          fi

          # Check frontend
          if curl -f -s http://localhost > /dev/null; then
              echo "✅ Frontend is accessible"
          else
              echo "⚠️ Frontend check failed"
          fi

          # Check backend API
          if curl -f -s http://localhost:3001/api/health > /dev/null; then
              echo "✅ Backend API is healthy"
          else
              echo "⚠️ Backend API check failed"
          fi

          echo "🎉 Deployment completed!"
          echo "🌐 Application: http://34.173.186.108"
          echo "🔗 API: http://34.173.186.108:3001/api"

          # Show final status
          echo ""
          echo "📊 Final Status:"
          docker-compose -f docker-compose.prod.yml ps
          DEPLOY_EOF

          chmod +x deploy-package/deploy.sh

      - name: 📡 Transfer Files to VM
        run: |
          # Create deployment directory on VM
          ssh ${{ secrets.VM_USER || 'kovendhan2535' }}@${{ secrets.VM_HOST || '34.173.186.108' }} "
            mkdir -p ~/deployment
            rm -rf ~/deployment/*
          "

          # Transfer deployment package
          scp -r deploy-package/* ${{ secrets.VM_USER || 'kovendhan2535' }}@${{ secrets.VM_HOST || '34.173.186.108' }}:~/deployment/

      - name: 🚀 Execute Deployment
        run: |
          ssh ${{ secrets.VM_USER || 'kovendhan2535' }}@${{ secrets.VM_HOST || '34.173.186.108' }} "
            cd ~/deployment
            chmod +x deploy.sh
            ./deploy.sh
          "

      - name: 🏥 Post-Deployment Verification
        run: |
          echo "🔍 Running post-deployment checks..."
          ssh ${{ secrets.VM_USER || 'kovendhan2535' }}@${{ secrets.VM_HOST || '34.173.186.108' }} "
            echo '📊 Container Status:'
            docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'
            
            echo ''
            echo '🌐 Service Accessibility:'
            curl -I http://localhost 2>/dev/null | head -1 || echo 'Frontend: Not accessible'
            curl -I http://localhost:3001/api/health 2>/dev/null | head -1 || echo 'Backend: Not accessible'
            
            echo ''
            echo '💾 Disk Usage:'
            df -h /
            
            echo ''
            echo '📈 System Resources:'
            free -h
          "

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()

    steps:
      - name: 🎉 Success Notification
        if: needs.deploy.result == 'success'
        run: |
          echo "🎉 Deployment Successful!"
          echo "✅ Application is live at: http://${{ secrets.VM_HOST || '34.173.186.108' }}"
          echo "📊 Dashboard: http://${{ secrets.VM_HOST || '34.173.186.108' }}/admin"
          echo "🔗 API: http://${{ secrets.VM_HOST || '34.173.186.108' }}:3001/api"

      - name: 🚨 Failure Notification
        if: needs.deploy.result == 'failure'
        run: |
          echo "❌ Deployment Failed!"
          echo "🔍 Check the deployment logs above for details"
          echo "🛠️ Common issues to check:"
          echo "   - SSH connectivity to VM"
          echo "   - Docker service status"
          echo "   - Available disk space"
          echo "   - Port accessibility"
