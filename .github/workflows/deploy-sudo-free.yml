name: 🚀 Deploy Helpdesk System (Sudo-Free)

on:
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

jobs:
  deploy:
    name: 🚀 Deploy to GCP VM (No Sudo)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Validate secrets
        run: |
          echo "🔍 Validating GitHub Secrets..."

          if [ -z "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "❌ SSH_PRIVATE_KEY secret is not set or empty"
            exit 1
          fi

          if [ -z "${{ secrets.VM_HOST }}" ]; then
            echo "❌ VM_HOST secret is not set or empty"
            exit 1
          fi

          if [ -z "${{ secrets.VM_USER }}" ]; then
            echo "❌ VM_USER secret is not set or empty"
            exit 1
          fi

          echo "✅ All required secrets are configured"
          echo "🎯 Target server: ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}"

      - name: 🔧 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🔑 Add VM to known hosts
        run: |
          echo "Adding ${{ secrets.VM_HOST }} to known hosts..."
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
          echo "✅ Known hosts updated"

      - name: 🧪 Test SSH Connection
        run: |
          echo "🧪 Testing SSH connection..."
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            echo '✅ SSH connection successful!'
            echo 'User: $(whoami)'
            echo 'Home: $HOME'
            echo 'Working directory: $(pwd)'
            echo 'Docker version:'
            docker --version 2>/dev/null || echo '❌ Docker not available'
            echo 'Docker Compose version:'
            docker-compose --version 2>/dev/null || echo '❌ Docker Compose not available'
            echo 'Docker group membership:'
            groups $(whoami) | grep -q docker && echo '✅ User in docker group' || echo '⚠️ User NOT in docker group'
          "

      - name: 🚀 Deploy Application (Sudo-Free)
        run: |
          ssh ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "
            set -e
            
            echo '🚀 Starting sudo-free deployment process...'
            echo '📅 Timestamp: \$(date)'
            
            # Clean up previous installation (user space only)
            cd ~
            echo '🧹 Cleaning up previous installation...'
            rm -rf Helpdesk-Ticketing-System 2>/dev/null || true
            rm -rf .git .gitconfig .gitignore 2>/dev/null || true
            
            # Clear any git locks (user space only)
            pkill -f git -u \$(whoami) 2>/dev/null || true
            sleep 2
            
            # Clone repository with fresh start
            echo '📥 Cloning repository...'
            git clone https://github.com/kovendhan5/Helpdesk-Ticketing-System.git
            cd Helpdesk-Ticketing-System
            
            # Show current directory and files for debugging
            echo '📂 Repository cloned successfully'
            echo '📂 Current directory: \$(pwd)'
            echo '📁 Files in repository:'
            ls -la | head -20
            
            # Verify required files exist
            echo '🔍 Verifying required files...'
            [ -f 'docker-compose.prod.yml' ] && echo '✅ docker-compose.prod.yml found' || (echo '❌ docker-compose.prod.yml missing' && exit 1)
            [ -d 'backend' ] && echo '✅ backend directory found' || (echo '❌ backend directory missing' && exit 1)
            [ -d 'frontend' ] && echo '✅ frontend directory found' || (echo '❌ frontend directory missing' && exit 1)
            
            # Verify Docker is available (should already be installed)
            echo '🐳 Checking Docker availability...'
            if ! command -v docker &> /dev/null; then
              echo '❌ Docker is not installed or not in PATH'
              echo '👉 Please install Docker on the VM first'
              exit 1
            else
              echo '✅ Docker is available: \$(docker --version)'
            fi
            
            # Verify Docker Compose is available (should already be installed)
            echo '🐳 Checking Docker Compose availability...'
            if ! command -v docker-compose &> /dev/null; then
              echo '❌ Docker Compose is not installed or not in PATH'
              echo '👉 Please install Docker Compose on the VM first'
              exit 1
            else
              echo '✅ Docker Compose is available: \$(docker-compose --version)'
            fi
            
            # Test Docker permissions
            echo '👥 Testing Docker permissions...'
            if docker ps >/dev/null 2>&1; then
              echo '✅ Docker commands work without sudo'
            else
              echo '❌ Docker commands require sudo - this will fail'
              echo '👉 Please add user to docker group: sudo usermod -aG docker \$(whoami)'
              echo '👉 Then logout and login again'
              exit 1
            fi
            
            # Set up application directory in user space
            echo '📁 Setting up application directory...'
            rm -rf ~/helpdesk-app 2>/dev/null || true
            mkdir -p ~/helpdesk-app
            
            # Copy files safely
            echo '📋 Copying application files...'
            cp -r backend frontend ~/helpdesk-app/
            cp docker-compose.prod.yml ~/helpdesk-app/
            cp .env.production ~/helpdesk-app/ 2>/dev/null || echo '⚠️ .env.production not found, using defaults'
            
            echo '✅ Files copied successfully'
            echo '📁 Application directory contents:'
            ls -la ~/helpdesk-app/
            
            # Deploy with Docker Compose
            echo '🚀 Deploying with Docker Compose...'
            cd ~/helpdesk-app
            
            # Stop existing containers (if any)
            echo '🛑 Stopping existing containers...'
            if docker-compose -f docker-compose.prod.yml ps -q | grep -q .; then
              docker-compose -f docker-compose.prod.yml down
              echo '✅ Existing containers stopped'
            else
              echo '📝 No existing containers to stop'
            fi
            
            # Clean up old images and containers (user accessible only)
            echo '🧹 Cleaning up old containers and images...'
            docker container prune -f || true
            docker image prune -f || true
            docker volume prune -f || true
            
            # Build and start containers
            echo '🏗️ Building and starting containers...'
            docker-compose -f docker-compose.prod.yml build --no-cache
            docker-compose -f docker-compose.prod.yml up -d --remove-orphans
            
            # Wait for services to start
            echo '⏳ Waiting for services to start...'
            sleep 30
            
            # Check container status
            echo '📊 Container Status:'
            docker ps -a
            
            # Check if containers are running
            RUNNING_CONTAINERS=\$(docker ps --format 'table {{.Names}}\t{{.Status}}' | grep -c 'Up' || echo '0')
            echo \"📊 Running containers: \$RUNNING_CONTAINERS\"
            
            # Check container logs for any immediate issues
            echo '📋 Recent container logs:'
            docker-compose -f docker-compose.prod.yml logs --tail=10
            
            # Health check
            echo '🏥 Performing health check...'
            sleep 10
            
            # Test if the application is responding
            if curl -f http://localhost:3001/api/health >/dev/null 2>&1; then
              echo '✅ Backend health check passed'
            else
              echo '⚠️ Backend health check failed or endpoint unavailable'
            fi
            
            if curl -f http://localhost:80 >/dev/null 2>&1; then
              echo '✅ Frontend health check passed'
            else
              echo '⚠️ Frontend health check failed or endpoint unavailable'
            fi
            
            echo '✅ Deployment completed successfully!'
            echo '🌐 Access your application at: http://34.173.186.108'
            echo '📊 Check container status with: docker ps'
            echo '📋 View logs with: docker-compose -f ~/helpdesk-app/docker-compose.prod.yml logs'
            echo '🔄 Restart containers with: docker-compose -f ~/helpdesk-app/docker-compose.prod.yml restart'
          "

      - name: 📊 Deployment Summary
        if: always()
        run: |
          echo "📊 Deployment Summary"
          echo "===================="
          echo "🎯 Target: ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}"
          echo "📅 Time: $(date)"
          echo "🚀 Workflow: Sudo-Free Deployment"
          echo "✅ Deployment process completed"
          echo ""
          echo "🌐 Application should be accessible at: http://34.173.186.108"
          echo "📋 Check deployment status by connecting to VM and running:"
          echo "   docker ps"
          echo "   docker-compose -f ~/helpdesk-app/docker-compose.prod.yml logs"
