name: üöÄ Automated Helpdesk Deployment

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual triggering

env:
  GCP_VM_IP: "34.55.113.9"
  SSH_USER: "helpdesk-production-user-2025"
  DEPLOY_DIR: "helpdesk-app"

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: üöÄ Deploy to GCP VM
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîß Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H ${{ env.GCP_VM_IP }} >> ~/.ssh/known_hosts

      - name: üß™ Test SSH Connection
        run: |
          ssh -i ~/.ssh/deploy_key -o ConnectTimeout=30 ${{ env.SSH_USER }}@${{ env.GCP_VM_IP }} "echo 'SSH connection successful'"

      - name: üóÇÔ∏è Prepare Deployment Directory
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.GCP_VM_IP }} "
            rm -rf ${{ env.DEPLOY_DIR }}
            mkdir -p ${{ env.DEPLOY_DIR }}
          "

      - name: üìÇ Clone Repository on Server
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.GCP_VM_IP }} "
            cd ${{ env.DEPLOY_DIR }}
            git clone https://github.com/${{ github.repository }}.git .
            git checkout ${{ github.sha }}
          "

      - name: üîß Setup Environment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.GCP_VM_IP }} "
            cd ${{ env.DEPLOY_DIR }}
            cp .env.example .env
            
            # Update environment variables if secrets are available
            if [ ! -z '${{ secrets.DB_PASSWORD }}' ]; then
              sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=${{ secrets.DB_PASSWORD }}/' .env
            fi
            if [ ! -z '${{ secrets.JWT_SECRET }}' ]; then
              sed -i 's/JWT_SECRET=.*/JWT_SECRET=${{ secrets.JWT_SECRET }}/' .env
            fi
            if [ ! -z '${{ secrets.REDIS_PASSWORD }}' ]; then
              sed -i 's/REDIS_PASSWORD=.*/REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}/' .env
            fi
          "

      - name: üê≥ Deploy with Docker Compose
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.GCP_VM_IP }} "
            cd ${{ env.DEPLOY_DIR }}
            
            # Stop existing containers
            sudo docker-compose down --remove-orphans || true
            
            # Pull latest images and rebuild
            sudo docker-compose pull || true
            sudo docker-compose up -d --build --force-recreate
            
            # Wait for services to be ready
            echo 'Waiting for services to start...'
            sleep 60
          "

      - name: üîç Verify Deployment
        run: |
          ssh -i ~/.ssh/deploy_key ${{ env.SSH_USER }}@${{ env.GCP_VM_IP }} "
            cd ${{ env.DEPLOY_DIR }}
            
            echo 'üìä Container Status:'
            sudo docker-compose ps
            
            echo 'üè• Health Checks:'
            # Check if services are responding
            timeout 30 bash -c 'until curl -f http://localhost:8080; do sleep 2; done' || echo 'Frontend not responding'
            timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done' || echo 'Backend not responding'
          "

      - name: üåê Test External Access
        run: |
          echo "üåê Testing external access..."
          
          # Wait a bit more for services to be fully ready
          sleep 30
          
          # Test frontend
          if curl -f --max-time 30 http://${{ env.GCP_VM_IP }}:8080; then
            echo "‚úÖ Frontend is accessible"
          else
            echo "‚ö†Ô∏è Frontend may not be accessible externally"
          fi
          
          # Test backend
          if curl -f --max-time 30 http://${{ env.GCP_VM_IP }}:3001; then
            echo "‚úÖ Backend is accessible"
          else
            echo "‚ö†Ô∏è Backend may not be accessible externally"
          fi

      - name: üßπ Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/deploy_key

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: üîî Deployment Notification
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "üéâ Deployment successful!"
            echo "Frontend: http://${{ env.GCP_VM_IP }}:8080"
            echo "Backend: http://${{ env.GCP_VM_IP }}:3001"
          else
            echo "‚ùå Deployment failed!"
          fi
